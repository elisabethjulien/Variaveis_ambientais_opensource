############################################################################################
########################{{{{{  extraction of info of interest }}}}}#########################
########################{{{{{ CPC Global Unified Temperature }}}}}##########################
#####   downloaded from: https://psl.noaa.gov/data/gridded/data.cpc.globaltemp.html   ######
###################################     05/2025 ############################################    
############################################################################################

library(terra)
library(lubridate)
library(tidyr)
library(dplyr)
library(ncdf4)

# Open the NetCDF file and read variables
nc_file <- nc_open("./Downloads/tmax.1979.nc")
tmax <- aperm(ncvar_get(nc_file, "tmax"), c(2, 1, 3))  # Convert to [lon, lat, time]
lon <- ncvar_get(nc_file, "lon")
lat <- ncvar_get(nc_file, "lat")
time_var <- ncvar_get(nc_file, "time")

# Create SpatRaster from temperature data
r <- rast(tmax)
ext(r) <- c(min(lon), max(lon), min(lat), max(lat))
crs(r) <- "EPSG:4326"

# Crop the raster to Portugal's extent
portugal_ext <- ext(349, 355, 35, 44)
tmax_crop <- crop(r, portugal_ext)

# Convert to a tidy data frame with Lon, Lat, Date, and Temperature
dates <- ymd_hms("1900-01-01 00:00:00") + hours(time_var)

temp_matrix <- as.matrix(tmax_crop)

# Get latitudes and longitudes
lon <- xFromCol(tmax_crop, 1:ncol(tmax_crop))
lat <- yFromRow(tmax_crop, 1:nrow(tmax_crop))

# Create a dataframe holding Lat, Lon, and the temperature values
mat_df <- data.frame(
  Lon = rep(lon, each = nrow(tmax_crop)),
  Lat = rep(lat, times = ncol(tmax_crop)),
  Value = as.vector(temp_matrix)
)

# Now, replicate the dates to match the number of rows
dates_repeated <- rep(dates, each = nrow(tmax_crop))

# Add the Date column to mat_df
mat_df$Date <- dates_repeated


#######################################################"
#AS A LOOP#
##################################################################"

library(ncdf4)
library(terra)
library(dplyr)
library(tidyr)
library(lubridate)

folder_path <- "./tempmax"
nc_files <- list.files(path = folder_path, pattern = "\\.nc$", full.names = TRUE)


target_lon <- 351.0121
target_lat <- 41.6340
tolerance <- 0.001 

# Function to process NetCDF files
process_nc_file <- function(folder_path) {
  # Open the NetCDF file and read variables
  nc_file <- nc_open(folder_path)
  tmax <- aperm(ncvar_get(nc_file, "tmax"), c(2, 1, 3))  # Convert to [lon, lat, time]
  lon <- ncvar_get(nc_file, "lon")
  lat <- ncvar_get(nc_file, "lat")
  time_var <- ncvar_get(nc_file, "time")
  
  # Create SpatRaster from temperature data
  r <- rast(tmax)
  ext(r) <- c(min(lon), max(lon), min(lat), max(lat))
  crs(r) <- "EPSG:4326"
  
  # Crop the raster to Portugal's extent
  portugal_ext <- ext(351, 352, 40, 42)
  tmax_crop <- crop(r, portugal_ext)
  
  # Convert time to dates
  dates <- ymd_hms("1900-01-01 00:00:00") + hours(time_var)
  
  # Convert to matrix
  temp_matrix <- as.matrix(tmax_crop)
  
  # Get latitudes and longitudes from the raster
  lon_vals <- xFromCol(tmax_crop, 1:ncol(tmax_crop))
  lat_vals <- yFromRow(tmax_crop, 1:nrow(tmax_crop))
  
  # Create a dataframe holding Lon, Lat, and temperature values
  mat_df <- data.frame(
    Lon = rep(lon_vals, each = nrow(tmax_crop)),
    Lat = rep(lat_vals, times = ncol(tmax_crop)),
    Value = as.vector(temp_matrix)
  )
  
  # Replicate dates to match the number of rows
  dates_repeated <- rep(dates, each = nrow(tmax_crop))
  
  # Add Date column to mat_df
  mat_df$Date <- dates_repeated
  
  # Return processed data frame
  return(mat_df)
}

result_list <- lapply(nc_files, process_nc_file)

final_df <- do.call(rbind, result_list)

# result: a dataframe merging daily max_temp info over the years from files dowloaded, split by geographic areas (lon lat), within the cropped area we defined
head(final_df)

final_df <- do.call(rbind, result_list)

unique_coords <- final_df %>%
  distinct(Lon, Lat)

print(unique_coords)


filtered_df <- final_df %>%
  filter(
    (abs(Lon - 351.0122) < tolerance & abs(Lat - 40.13819) < tolerance) |
      (abs(Lon - 351.0122) < tolerance & abs(Lat - 41.63403) < tolerance)
  )

filtered_df$tmax<-filtered_df$Value
filtered_df$Value<-NULL

write.csv(filtered_df, "./tmax_1979_ports.csv", row.names = FALSE)


